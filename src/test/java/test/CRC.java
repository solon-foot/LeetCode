package test;

import leetcode.TLog;

public class CRC {
    static short fcstab[] = {
            (short) 0x0000, (short) 0x1189, (short) 0x2312, (short) 0x329b, (short) 0x4624, (short) 0x57ad, (short) 0x6536, (short) 0x74bf, (short) 0x8c48, (short) 0x9dc1,
            (short) 0xaf5a, (short) 0xbed3, (short) 0xca6c, (short) 0xdbe5, (short) 0xe97e, (short) 0xf8f7, (short) 0x1081, (short) 0x0108, (short) 0x3393, (short) 0x221a,
            (short) 0x56a5, (short) 0x472c, (short) 0x75b7, (short) 0x643e, (short) 0x9cc9, (short) 0x8d40, (short) 0xbfdb, (short) 0xae52, (short) 0xdaed, (short) 0xcb64,
            (short) 0xf9ff, (short) 0xe876, (short) 0x2102, (short) 0x308b, (short) 0x0210, (short) 0x1399, (short) 0x6726, (short) 0x76af, (short) 0x4434, (short) 0x55bd,
            (short) 0xad4a, (short) 0xbcc3, (short) 0x8e58, (short) 0x9fd1, (short) 0xeb6e, (short) 0xfae7, (short) 0xc87c, (short) 0xd9f5, (short) 0x3183, (short) 0x200a,
            (short) 0x1291, (short) 0x0318, (short) 0x77a7, (short) 0x662e, (short) 0x54b5, (short) 0x453c, (short) 0xbdcb, (short) 0xac42, (short) 0x9ed9, (short) 0x8f50,
            (short) 0xfbef, (short) 0xea66, (short) 0xd8fd, (short) 0xc974, (short) 0x4204, (short) 0x538d, (short) 0x6116, (short) 0x709f, (short) 0x0420, (short) 0x15a9,
            (short) 0x2732, (short) 0x36bb, (short) 0xce4c, (short) 0xdfc5, (short) 0xed5e, (short) 0xfcd7, (short) 0x8868, (short) 0x99e1, (short) 0xab7a, (short) 0xbaf3,
            (short) 0x5285, (short) 0x430c, (short) 0x7197, (short) 0x601e, (short) 0x14a1, (short) 0x0528, (short) 0x37b3, (short) 0x263a, (short) 0xdecd, (short) 0xcf44,
            (short) 0xfddf, (short) 0xec56, (short) 0x98e9, (short) 0x8960, (short) 0xbbfb, (short) 0xaa72, (short) 0x6306, (short) 0x728f, (short) 0x4014, (short) 0x519d,
            (short) 0x2522, (short) 0x34ab, (short) 0x0630, (short) 0x17b9, (short) 0xef4e, (short) 0xfec7, (short) 0xcc5c, (short) 0xddd5, (short) 0xa96a, (short) 0xb8e3,
            (short) 0x8a78, (short) 0x9bf1, (short) 0x7387, (short) 0x620e, (short) 0x5095, (short) 0x411c, (short) 0x35a3, (short) 0x242a, (short) 0x16b1, (short) 0x0738,
            (short) 0xffcf, (short) 0xee46, (short) 0xdcdd, (short) 0xcd54, (short) 0xb9eb, (short) 0xa862, (short) 0x9af9, (short) 0x8b70, (short) 0x8408, (short) 0x9581,
            (short) 0xa71a, (short) 0xb693, (short) 0xc22c, (short) 0xd3a5, (short) 0xe13e, (short) 0xf0b7, (short) 0x0840, (short) 0x19c, (short) 0x2b52, (short) 0x3adb,
            (short) 0x4e64, (short) 0x5fed, (short) 0x6d76, (short) 0x7cff, (short) 0x9489, (short) 0x8500, (short) 0xb79b, (short) 0xa612, (short) 0xd2ad, (short) 0xc324,
            (short) 0xf1bf, (short) 0xe036, (short) 0x18c1, (short) 0x0948, (short) 0x3bd3, (short) 0x2a5a, (short) 0x5ee5, (short) 0x4f6c, (short) 0x7df7, (short) 0x6c7e,
            (short) 0xa50a, (short) 0xb483, (short) 0x8618, (short) 0x9791, (short) 0xe32e, (short) 0xf2a7, (short) 0xc03c, (short) 0xd1b5, (short) 0x2942, (short) 0x38cb,
            (short) 0x0a50, (short) 0x1bd9, (short) 0x6f66, (short) 0x7eef, (short) 0x4c74, (short) 0x5dfd, (short) 0xb58b, (short) 0xa402, (short) 0x9699, (short) 0x8710,
            (short) 0xf3af, (short) 0xe226, (short) 0xd0bd, (short) 0xc134, (short) 0x39c3, (short) 0x284a, (short) 0x1ad1, (short) 0x0b58, (short) 0x7fe7, (short) 0x6e6e,
            (short) 0x5cf5, (short) 0x4d7c, (short) 0xc60c, (short) 0xd785, (short) 0xe51e, (short) 0xf497, (short) 0x8028, (short) 0x91a1, (short) 0xa33a, (short) 0xb2b3,
            (short) 0x4a44, (short) 0x5bcd, (short) 0x6956, (short) 0x78df, (short) 0x0c60, (short) 0x1de9, (short) 0x2f72, (short) 0x3efb, (short) 0xd68d, (short) 0xc704,
            (short) 0xf59f, (short) 0xe416, (short) 0x90a9, (short) 0x8120, (short) 0xb3bb, (short) 0xa232, (short) 0x5ac5, (short) 0x4b4c, (short) 0x79d7, (short) 0x685e,
            (short) 0x1ce1, (short) 0x0d68, (short) 0x3ff3, (short) 0x2e7a, (short) 0xe70e, (short) 0xf687, (short) 0xc41c, (short) 0xd595, (short) 0xa12a, (short) 0xb0a3,
            (short) 0x8238, (short) 0x93b1, (short) 0x6b46, (short) 0x7acf, (short) 0x4854, (short) 0x59dd, (short) 0x2d62, (short) 0x3ceb, (short) 0x0e70, (short) 0x1ff9,
            (short) 0xf78f, (short) 0xe606, (short) 0xd49d, (short) 0xc514, (short) 0xb1ab, (short) 0xa022, (short) 0x92b9, (short) 0x8330, (short) 0x7bc7, (short) 0x6a4e,
            (short) 0x58d5, (short) 0x495c, (short) 0x3de3, (short) 0x2c6a, (short) 0x1ef1, (short) 0x0f78
    };
    static int[] fcstab2 = {
            0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1,
            0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a,
            0x56a5, 0x472c, 0x75b7, 0x643e, 0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64,
            0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd,
            0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a,
            0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50,
            0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9,
            0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3,
            0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44,
            0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d,
            0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3,
            0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
            0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581,
            0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c, 0x2b52, 0x3adb,
            0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324,
            0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e,
            0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb,
            0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710,
            0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e,
            0x5cf5, 0x4d7c, 0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3,
            0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704,
            0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e,
            0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3,
            0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
            0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e,
            0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78
    };

    static byte[] crc(byte[] data) {
//        int fcs = 0xffff;
//        for(int i = 0;i<data.length;i++){
//            fcs = (fcs>>>8)^fcstab2[(fcs^data[i])&0xff];
//            fcs &=0xFFFF;
////            fcs =  (( (fcs >>> 8)) ^ fcstab[(fcs ^ data[i])&0xff]);
//
//        }
//        byte[] encodeData = new byte[2];
//        encodeData[0] = (byte) (fcs >>> 8);
//        encodeData[1] = (byte) (fcs);
//        return encodeData;

//        short fcs = (short) 0xffff;
//        for (int i = 4; i < data.length; i++) {
////            fcs = (fcs>>8)^fcstab[(fcs^*cp++)&0xff];
//            fcs = (short) (((short) (fcs >>> 8)) ^ fcstab[(fcs ^ data[i]) & (short) 0xff]);
//
//        }
//        byte[] encodeData = new byte[2];
//        encodeData[0] = (byte) (fcs >>> 8);
//        encodeData[1] = (byte) (fcs);
//        return encodeData;


        short sum = 0;
        for (int i = 4; i < data.length; i++) {
            sum += data[i];
        }
        byte[] encodeData = new byte[2];
        encodeData[0] = (byte) (sum >>> 8);
        encodeData[1] = (byte) (sum);
        return encodeData;
    }

    static void pro(byte[] data) {
        int sum = 0;
        boolean flag = false;
        for (int i = 0; i < data.length - 2; i++) {
            if (sum>0xFFF){
                sum-=data[i] & 0xFF;
            } else {
                sum+=data[i] & 0xFF;
            }
//            if (flag)
//                sum += data[i] & 0xFF;
//            else sum -= data[i] & 0xFF;
//            flag = !flag;
        }
//        sum += data.length-2;
//        System.out.println(data[data.length - 1] * 254 + data[data.length - 2]);
//        System.out.println(sum);
//        sum += 21500;
        TLog.e(Integer.toHexString(sum), Integer.toHexString(data[data.length - 1] * 255 + data[data.length - 2]));
        TLog.e(Integer.toHexString(data[data.length - 1] * 255 + data[data.length - 2] - sum));
        System.out.println(Integer.toHexString((data[data.length - 1] & 0xFF) * 256 + (data[data.length - 2] & 0xFF)));
        TLog.e(Integer.toHexString(sum % 255), Integer.toHexString(sum / 255));

    }

    public static void main(String[] args) {
//        byte[] data = new byte[]{(byte) 0x55, (byte) 0xaa, (byte) 0x00, (byte) 0x82, (byte) 0xfe, (byte) 0x00, (byte) 0x01, (byte) 0x00,
//                (byte) 0xff, (byte) 0xff, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x01, (byte) 0x00,
//                (byte) 0x00};
//        data = new byte[]{
//                (byte) 0x55, (byte) 0xaa, (byte) 0x00, (byte) 0x83, (byte) 0xfe, (byte) 0x00, (byte) 0x01, (byte) 0x00,
//                (byte) 0xff, (byte) 0xff, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02,
//                (byte) 0x01, (byte) 0x00, (byte) 0x00
//        };
//
////        byte[] crc16 = getCrc16(data);
//        byte[] crc = crc(data);
//        TLog.e(crc);//d9 58

        byte[] data = string2Byte("55 aa 00 cc  fe 00 01 00  ff ff 01 00  01 00 00 02  01 00   df 02  5a");
        data = string2Byte("55 aa 00 cb  fe 00 01 00  ff ff 01 00  01 00 00 02 01 00 df 01  5a");
        data = string2Byte("55 aa 00 ae  fe 00 01 00  ff ff 01 00  01 00 00 02 01 00 da df  59");
//        data = string2Byte("55 aa 00 ca  fe 00 01 00  ff ff 01 00  01 00 00 02  01 00 df 00  5a");
//        data = string2Byte("55 aa 00 c8  fe 00 01 00  ff ff 01 00  01 00 00 02  01 00 de fd  59 ");
//        data = string2Byte("55 aa 00 c9  fe 00 01 00  ff ff 01 00  01 00 00 02  01 00 de fe  59   ");
//        data = string2Byte("55 aa 00 82  fe 00 01 00  ff ff 01 00  01 00 00 02 01 00 00 d9  58");
//        data = string2Byte("55 aa 00 83  fe 00 01 00  ff ff 01 00  01 00 00 02 01 00 ff d9  59");
        pro(data);

        for (int i = 0; i < data.length; i++) {

        }
    }

    static byte[] string2Byte(String str) {
        str = str.trim();
        String s[] = str.split("\\s+");
        byte[] data = new byte[s.length];
        for (int i = 0; i < s.length; i++) {
//            data[i] = Byte.parseByte(s[i],16);
            data[i] = (byte) Integer.parseInt(s[i], 16);
        }
        return data;
    }
}
